main() <int main () at cpp-algortihms_a0f4e80/circularQueue.c:61>:
    createQueue() <QueuePtr createQueue (int maxsize) at cpp-algortihms_a0f4e80/circularQueue.c:21>:
        malloc()
        calloc()
    enqueue() <void enqueue (QueuePtr q, int item) at cpp-algortihms_a0f4e80/circularQueue.c:38>:
        isQueueFull() <int isQueueFull (QueuePtr q) at cpp-algortihms_a0f4e80/circularQueue.c:30>
        fprintf()
    fprintf()
    dequeue() <int dequeue (QueuePtr q) at cpp-algortihms_a0f4e80/circularQueue.c:49>:
        isQueueEmpty() <int isQueueEmpty (QueuePtr q) at cpp-algortihms_a0f4e80/circularQueue.c:34>
        fprintf()
main() <int main () at cpp-algortihms_a0f4e80/insertionsort.c:45>:
    insertion_sort() <int *insertion_sort (int *lptr, size_t n) at cpp-algortihms_a0f4e80/insertionsort.c:17>
    printf()
    print_array() <void print_array (int *lptr, size_t n) at cpp-algortihms_a0f4e80/insertionsort.c:35>:
        printf()
main() <int main () at cpp-algortihms_a0f4e80/hashTable.c:135>:
    allocate_hashTable() <HashTable *allocate_hashTable (int m) at cpp-algortihms_a0f4e80/hashTable.c:104>:
        CREATE_NEW()
        printf()
        abort()
        calloc()
    chained_hash_insert() <void chained_hash_insert (HashTable *T, entry_ptr newEntry) at cpp-algortihms_a0f4e80/hashTable.c:37>:
        printf()
        abort()
        hashFunction() <int hashFunction (HashTable *T, char k) at cpp-algortihms_a0f4e80/hashTable.c:28>:
            printf()
            abort()
    create_newEntry() <entry_ptr create_newEntry (char key, int val) at cpp-algortihms_a0f4e80/hashTable.c:121>:
        CREATE_NEW()
        printf()
        abort()
    chained_hash_search() <entry_ptr chained_hash_search (HashTable *T, char k) at cpp-algortihms_a0f4e80/hashTable.c:59>:
        printf()
        abort()
        hashFunction() <int hashFunction (HashTable *T, char k) at cpp-algortihms_a0f4e80/hashTable.c:28>:
            printf()
            abort()
    printf()
    chained_hash_delete() <bool chained_hash_delete (HashTable *T, entry_ptr ep) at cpp-algortihms_a0f4e80/hashTable.c:82>:
        hashFunction() <int hashFunction (HashTable *T, char k) at cpp-algortihms_a0f4e80/hashTable.c:28>:
            printf()
            abort()
        free()
main() <int main () at cpp-algortihms_a0f4e80/quickSort.c:69>:
    quickSortWrapper() <void quickSortWrapper (int *arrptr, int arrlength) at cpp-algortihms_a0f4e80/quickSort.c:67>:
        quickSort() <void quickSort (int *arrptr, int fIndex, int lIndex) at cpp-algortihms_a0f4e80/quickSort.c:58> (R):
            partition() <int partition (int *arrptr, int fIndex, int lIndex) at cpp-algortihms_a0f4e80/quickSort.c:30>:
                swap()
            quickSort() <void quickSort (int *arrptr, int fIndex, int lIndex) at cpp-algortihms_a0f4e80/quickSort.c:58> (recursive: see 3)
    ARRAY_LENGTH()
    printf()
    printarray()
main() <int main () at cpp-algortihms_a0f4e80/doublyLinkedList.c:74>:
    createDoublyLinkedList() <DoublyLinkedListPtr createDoublyLinkedList () at cpp-algortihms_a0f4e80/doublyLinkedList.c:28>:
        malloc()
    list_insert() <void list_insert (DoublyLinkedListPtr L, int item) at cpp-algortihms_a0f4e80/doublyLinkedList.c:57>:
        malloc()
    list_traverse() <void list_traverse (DoublyLinkedListPtr L) at cpp-algortihms_a0f4e80/doublyLinkedList.c:38>:
        printf()
        fprintf()
    list_search() <NodePtr list_search (DoublyLinkedListPtr L, int item) at cpp-algortihms_a0f4e80/doublyLinkedList.c:48>
    fprintf()
    printf()
    list_delete() <void list_delete (NodePtr node) at cpp-algortihms_a0f4e80/doublyLinkedList.c:69>:
        free()
main() <int main () at cpp-algortihms_a0f4e80/heapSort.c:62>:
    heapSort() <void heapSort (int *arrptr, size_t arr_length) at cpp-algortihms_a0f4e80/heapSort.c:51>:
        buildHeap() <HeapPtr buildHeap (int *arrptr, size_t arr_length) at cpp-algortihms_a0f4e80/heapSort.c:40>:
            malloc()
            MID_HEAP_INDEX()
            heapify() <void heapify (HeapPtr aHeap, size_t i) at cpp-algortihms_a0f4e80/heapSort.c:22> (R):
                LEFT()
                RIGHT()
                swap() <void swap (int *num1, int *num2) at cpp-algortihms_a0f4e80/heapSort.c:20>
                MID_HEAP_INDEX()
                heapify() <void heapify (HeapPtr aHeap, size_t i) at cpp-algortihms_a0f4e80/heapSort.c:22> (recursive: see 6)
        swap() <void swap (int *num1, int *num2) at cpp-algortihms_a0f4e80/heapSort.c:20>
        heapify() <void heapify (HeapPtr aHeap, size_t i) at cpp-algortihms_a0f4e80/heapSort.c:22> (R):
            LEFT()
            RIGHT()
            swap() <void swap (int *num1, int *num2) at cpp-algortihms_a0f4e80/heapSort.c:20>
            MID_HEAP_INDEX()
            heapify() <void heapify (HeapPtr aHeap, size_t i) at cpp-algortihms_a0f4e80/heapSort.c:22> (recursive: see 13)
        free()
    ARRAY_LENGTH()
    printf()
main() <int main () at cpp-algortihms_a0f4e80/merge_sorted_arrays.c:29>:
    merge_sorted_arrays() <int *merge_sorted_arrays (int *lptr1, size_t count1, int *lptr2, size_t count2) at cpp-algortihms_a0f4e80/merge_sorted_arrays.c:7>:
        calloc()
    printf()
main() <int main () at cpp-algortihms_a0f4e80/mergeSort.c:59>:
    printf()
    printarray() <void printarray (int *ptr, int firstIndex, int lastIndex) at cpp-algortihms_a0f4e80/mergeSort.c:15>:
        printf()
    mergesort() <void mergesort (int *ptr, int firstIndex, int lastIndex) at cpp-algortihms_a0f4e80/mergeSort.c:48> (R):
        mergesort() <void mergesort (int *ptr, int firstIndex, int lastIndex) at cpp-algortihms_a0f4e80/mergeSort.c:48> (recursive: see 5)
        merge() <void merge (int *ptr, int firstIndex, int mid, int lastIndex) at cpp-algortihms_a0f4e80/mergeSort.c:24>:
            calloc()
            memmove()
            free()
main() <int main () at cpp-algortihms_a0f4e80/graph.c:150>:
    GraphCreate() <graphADT GraphCreate () at cpp-algortihms_a0f4e80/graph.c:51>:
        CREATE_NEW()
    GraphAddVertex() <void GraphAddVertex (graphADT graph, graphElementT elem) at cpp-algortihms_a0f4e80/graph.c:83>:
        getVertex() <vertexT *getVertex (graphADT graph, graphElementT elem) at cpp-algortihms_a0f4e80/graph.c:58>:
        fprintf()
        CREATE_NEW()
        APPEND_TO_LINKLIST()
    GraphAddEdge() <void GraphAddEdge (vertexT *from, vertexT *to) at cpp-algortihms_a0f4e80/graph.c:69>:
        fprintf()
        CREATE_NEW()
        APPEND_TO_LINKLIST()
    getVertex() <vertexT *getVertex (graphADT graph, graphElementT elem) at cpp-algortihms_a0f4e80/graph.c:58>:
    printf()
    isDestReachable() <bool isDestReachable (graphADT graph, graphElementT from, graphElementT to) at cpp-algortihms_a0f4e80/graph.c:133>:
        getVertex() <vertexT *getVertex (graphADT graph, graphElementT elem) at cpp-algortihms_a0f4e80/graph.c:58>:
        markAllVerticesNotVisited() <void markAllVerticesNotVisited (graphADT graph) at cpp-algortihms_a0f4e80/graph.c:101>:
        GraphIsReachable() <bool GraphIsReachable (graphADT graph, vertexT *src, vertexT *dest) at cpp-algortihms_a0f4e80/graph.c:111> (R):
            GraphIsReachable() <bool GraphIsReachable (graphADT graph, vertexT *src, vertexT *dest) at cpp-algortihms_a0f4e80/graph.c:111> (recursive: see 18)
main() <int main () at cpp-algortihms_a0f4e80/simpleStack.c:34>:
    createStack() <StackPtr createStack (int stackSize) at cpp-algortihms_a0f4e80/simpleStack.c:14>:
        malloc()
        calloc()
    push() <void push (StackPtr stack, int item) at cpp-algortihms_a0f4e80/simpleStack.c:24>:
        printf()
    printf()
    pop() <int pop (StackPtr stack) at cpp-algortihms_a0f4e80/simpleStack.c:31>:
        isStackEmpty() <int isStackEmpty (StackPtr stack) at cpp-algortihms_a0f4e80/simpleStack.c:22>
